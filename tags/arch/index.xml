<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arch on Horc-Blog</title>
    <link>https://horc-fn.github.io/tags/arch/</link>
    <description>Recent content in Arch on Horc-Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 12 Apr 2016 10:13:45 +0800</lastBuildDate>
    <atom:link href="https://horc-fn.github.io/tags/arch/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>高端唯有定制 Arch-Linux折腾记</title>
      <link>https://horc-fn.github.io/note/arch/</link>
      <pubDate>Tue, 12 Apr 2016 10:13:45 +0800</pubDate>
      
      <guid>https://horc-fn.github.io/note/arch/</guid>
      <description>

&lt;h1 id=&#34;序言&#34;&gt;序言&lt;/h1&gt;

&lt;h2 id=&#34;邂逅arch&#34;&gt;邂逅Arch&lt;/h2&gt;

&lt;p&gt;摸爬滚打,CentOS、Fedora、Ubuntu、Mint、Deepin、Kali等等诸多优秀的系统因种种原因浅尝辄止。据说每个Linux发行版都有对应的哲学,大概因为我个人的小哲学归属于Arch之道,就滚到Arch了。。&lt;/p&gt;

&lt;p&gt;先上几张图吸引眼球(&lt;strong&gt;非笔者美化及使用,详见本文参考1&lt;/strong&gt;)
&lt;img src=&#34;../../img/kon1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Archlinux 是一个可制定性非常强的Linux 发行版,从一个基本系统开始,如何搭建系统全部都由你掌控,所以一万个人有一万种Arch。
不过Arch的安装过程不怎么友好,把安装过程写下来吧,如果有人也想体验一下Arch,说不定有点用。
&amp;gt; &lt;a href=&#34;https://www.archlinux.org/download/&#34;&gt;下载Arch镜像请点击这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;arch的优劣&#34;&gt;Arch的优劣&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;优&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;滚动升级,再也无需因为发行版的更新而重装系统&lt;/li&gt;
&lt;li&gt;软件包很新,第一时间尝试新的软件,包括最新内核&lt;/li&gt;
&lt;li&gt;详细的wiki以及pacman近乎完美地处理包依赖关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;劣&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用Archlinux 中文社区中广为留传的话解释:多滚多死,少滚少死,不滚等死。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;基础安装&#34;&gt;基础安装&lt;/h1&gt;

&lt;p&gt;根据官网描述,Arch Linux能在任何内存空间不小于256MB 的i686兼容机上运行。最基本的base组中包含的包将占用约 800MB存储空间。&lt;strong&gt;本文通过将镜像写入U盘进行启动安装.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装须知&#34;&gt;安装须知&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;archlinux 有别于其他发行版的地方是:这货没有安装程序！ 是的,arch没有安装程序这个概念。
不过没有关系,如果你对arch感到陌生,之后内容或许能帮你从无到有搭建起自己的archlinux。&lt;/li&gt;
&lt;li&gt;arch 和 gentoo 一样极度依赖网络环境, 如果你无法在安装过程中提供良好的网络环境,请尝试组合键&lt;strong&gt;&lt;code&gt;ctrl+w&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;另外笔者PC只有BIOS,所以使用的是BIOS+MBR的安装,虽然文中提及了一些UEFI+GPT的安装参考,但是可能并不能完全解决您的安装问题。当然您也可以尝试&lt;strong&gt;&lt;code&gt;ctrl+w&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;引导安装媒介&#34;&gt;引导安装媒介&lt;/h2&gt;

&lt;p&gt;大多现代操作系统允许在POST时手动设置引导设备,在开机屏幕中一般会显示需要的按键。进入BIOS设置界面后,修改设备引导顺序。把包含Arch ISO的设备设为系统引导首选。
之后让您的计算机开始常规的引导流程。
当Arch菜单出现时,选 &amp;ldquo;Boot Arch Linux&amp;rdquo; 并按 Enter进入安装环境.
&amp;gt; 如果您使用 UEFI 主板,且 UEFI 启动模式（优于 BIOS/Legacy 模式）已启用,CD/USB 会自动通过systemd-boot 启动 Arch Linux。&lt;/p&gt;

&lt;h2 id=&#34;准备存储设备&#34;&gt;准备存储设备&lt;/h2&gt;

&lt;h3 id=&#34;设备识别&#34;&gt;&lt;strong&gt;设备识别&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;首先要确定系统安装的目标设备,下面命令会显示所有连接到系统的设备和分区状况:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# lsblk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;磁盘设备名一般以 sdX 的形式出现,如果设备上有分区,会以 sdXY的名称出现。rom, loop 或 airoot 格式的分区可以忽略。&lt;/p&gt;

&lt;p&gt;如果不需要重新分区,可以跳到 #创建文件系统,否则继续。&lt;/p&gt;

&lt;h3 id=&#34;分区&#34;&gt;&lt;strong&gt;分区&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;硬盘首先要分区,接着将分区格式化为需要的文件系统。
有两种分区类型:
* GUID分区表(GPT)
* 主引导记录(MBR)&lt;/p&gt;

&lt;h3 id=&#34;创建新的分区表&#34;&gt;&lt;strong&gt;创建新的分区表&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Arch 安装盘中包含了多种分区工具,本文使用parted进行.
&amp;gt; 打开需要新建分区表的设备&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# parted /dev/sdx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为 BIOS 系统创建 MBR/msdos 分区表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(parted) mklabel msdos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为 UEFI 系统创建 GPT 分区表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(parted) mklabel gpt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用下面命令创建分区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(parted) mkpart part-type fs-type start end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;我的分区方案(BIOS/MBR)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(parted) mkpart primary ext4 1M 300M         # /boot
(parted) set 1 boot on
(parted) mkpart primary ext4 300M 20G        # /
(parted) mkpart primary linux-swap 20G 28G
(parted) mkpart primary ext4 28G 100%        # /home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;UEFI/GPT示例&lt;/strong&gt;
&amp;gt; 首先需要一个 EFI 系统分区.如果是和 Windows 双系统启动,此分区已经存在,不要重新创建。
使用下面命令创建 (建议大小是 512MiB)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(parted) mkpart ESP fat32 1M 513M
(parted) set 1 boot on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其余分区可参考MBR,基本没有差别&lt;/p&gt;

&lt;h3 id=&#34;关于swap分区&#34;&gt;&lt;strong&gt;关于swap分区&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Swap分区在系统的物理内存不够用的时候,把硬盘空间中的一部分空间释放出来,以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序,这些被释放的空间被临时保存到Swap分区中,等到那些程序要运行时,再从Swap分区中恢复保存的数据到内存中。下面是查询Red Hat推荐的系统swap空间:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;系统RAM容量&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;建议swap空间大小&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;允许休眠的建议swap空间大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lt;=2GB&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RAM容量的2倍&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RAM容量的3倍&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2GB~8GB&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;与RAM容量相等&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RAM容量的2倍&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8GB~64GB&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RAM容量的0.5倍&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;RAM容量的1.5倍&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;gt;=64GB&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;独立负载&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不建议使用休眠功能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;格式化文件系统&#34;&gt;&lt;strong&gt;格式化文件系统&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果新创建了 UEFI 系统分区,需要格式化成 fat32 或 vfat32 文件系统,否则无法启动。Windows 双启动系统不要再格式化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# mkfs.vfat -F32 /dev/sdxY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议用 ext4 文件系统格式化其它分区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkfs.ext4 /dev/sdxY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若分了swap分区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkswap /dev/sdaX
# swapon /dev/sdaX
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;挂载分区-根据自己的分区方案自行调整&#34;&gt;&lt;strong&gt;挂载分区&lt;/strong&gt;(&lt;em&gt;根据自己的分区方案自行调整&lt;/em&gt;)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# mount /dev/sda2 /mnt
# mkdir /mnt/{boot,home}
# mount /dev/sda1 /mnt/boot
# mount /dev/sda4 /mnt/home
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;网络连接&#34;&gt;网络连接&lt;/h2&gt;

&lt;p&gt;网络设备名可以通过 &lt;code&gt;ip link&lt;/code&gt; 或 &lt;code&gt;iw dev&lt;/code&gt;(无线网络)可以查到设备名称。通常以en(ethernet), wl(WLAN)或 ww(WWAN)开头。启用或禁用网络端口通过:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ip link set eth0 up
# ip link set eth0 down
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;有线连接&#34;&gt;有线连接&lt;/h3&gt;

&lt;p&gt;安装程序会在启动时自动运行dhcpcd守护进程以尝试有线连接。&lt;/p&gt;

&lt;h3 id=&#34;无线连接&#34;&gt;无线连接&lt;/h3&gt;

&lt;p&gt;使用 netctl 的 wifi-menu 连接到无线网络:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wifi-menu -o wlp8s0  (笔者的无线网络设备名)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;手动配置&#34;&gt;手动配置&lt;/h3&gt;

&lt;p&gt;arch给出了很多网络配置模块,进入&lt;code&gt;/etc/netctl&lt;/code&gt;下查看模版文件,进行手动配置
为了防止冲突,先关闭dhcpcd服务。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# systemctl stop dhcpcd@enp7s0.service  (enp7s0是笔者的网络设备名)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# netctl start profile[配置文件]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;有线&#34;&gt;&lt;em&gt;有线&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;dhcp
&lt;code&gt;
/etc/netctl/my_dhcp_rofile
----------------------------
Interface=enp7s0
IP=dhcp
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;static&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/netctl/my_static_rofile
----------------------------
Interface=enp7s0
Connection=ethernet
IP=static
Address=(&#39;192.168.10.2/24&#39;)  #此处的/24相当于netmask(255.255.255.0)
Gateway=&#39;192.168.10.1&#39;
DNS=(&#39;192.168.10.1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;无线-wpa-psk&#34;&gt;&lt;em&gt;无线(WPA-PSK)&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;用&lt;code&gt;wpa_passphrase&lt;/code&gt;中的方法生成256位PSK:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wpa_passphrase your_essid passphrase
-------------------------------------
network={
ssid=&amp;quot;your_essid&amp;quot;
#psk=&amp;quot;passphrase&amp;quot;
psk=64cf3ced850ecef39197bb7b7b301fc39437a6aa6c6a599d0534b16af578e04a
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/etc/netctl/wireless-wpa
-------------------------
Description=&#39;A simple WPA encrypted wireless connection using 256-bit PSK&#39;
Interface=wlp8s0
Connection=wireless
Security=wpa
IP=dhcp
ESSID=your_essid
Key=\&amp;quot;64cf3ced850ecef39197bb7b7b301fc39437a6aa6c6a599d0534b16af578e04a
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;如果密码没有起作用,从变量 Key 中删除 &lt;code&gt;\&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;联网之后,你需要安装一个基本系统了:一个简单的,只有内核、网络环境和基本编译环境的系统。&lt;/p&gt;

&lt;p&gt;&lt;font size=&#34;+2&#34; color=&#34;red&#34;&gt;&lt;strong&gt;Note Note Note&lt;/strong&gt;(重要的事情说三遍！！)&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;此刻你正在运行的系统并不是我们要安装的新系统,新系统会被安装到硬盘。
所以我们做的事就是:利用此刻的系统及网络环境一点点地从一个基本系统开始搭建新系统,
直到新系统有了基本的环境和网络,然后重启进入新系统搭建自身。&lt;/p&gt;

&lt;h2 id=&#34;安装啦&#34;&gt;安装啦&lt;/h2&gt;

&lt;h3 id=&#34;选择安装镜像-更新源&#34;&gt;&lt;strong&gt;选择安装镜像,更新源&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;pacman 会依次尝试列表中的源,所以列表中排的越靠前的镜像站优先级越高。(推荐ustc):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# sed -i &amp;quot;s/^\b/#/g&amp;quot; /etc/pacman.d/mirrorlist
# vi /etc/pacman.d/mirrorlist
------------------------------------------------------------
Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
Server = http://mirrors.163.com/archlinux/$repo/os/$arch
Server = http://mirrors.sohu.com/archlinux/$repo/os/$arch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后进行源的更新&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -Syy
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;据说在旧版Arch的mirrorlist列表中,所有的Taiwan后面都有“Province of China”！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;安装基本软件包&#34;&gt;安装基本软件包&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# pacstrap -i /mnt base base-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外新系统想要搭建自身,必须要有网络环境。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacstrap -i /mnt wpa_supplicant dialog ppp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;

&lt;h3 id=&#34;生成fstab&#34;&gt;生成fstab&lt;/h3&gt;

&lt;p&gt;把你辛苦挂载好的分区写入新系统的fstab,(UUID 能唯一且独立地标识)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab  (使用卷标的话将-U改为-L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你是arch win 双系统,别忘了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /mnt/etc/fstab
------------------------------------------------------------------
# #把你的ntfs 分区也写进去,典型的例如：
/dev/sdax       /mnt/sdax       ntfs-3g defaults,umask=000    0  0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然也必须把ntfs-3g 装上。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacstrap /mnt ntfs-3g
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;chroot&#34;&gt;chroot&lt;/h3&gt;

&lt;p&gt;现在新系统已经拥有了基本环境了,chroot到新系统,并指定bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# arch-chroot /mnt /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;主机名&#34;&gt;主机名&lt;/h3&gt;

&lt;p&gt;设置自己喜欢的主机名:(笔者horc-pc)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# echo horc-pc &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;/etc/hosts&lt;/code&gt;的::1 后添加同样的主机名:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/hosts
-----------------------------------------------------------
#&amp;lt;ip-address&amp;gt;	&amp;lt;hostname.domain.org&amp;gt;	       &amp;lt;hostname&amp;gt;
127.0.0.1	localhost.localdomain localhost
::1		    localhost.localdomain localhost	    horc-pc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;locale&#34;&gt;Locale&lt;/h3&gt;

&lt;p&gt;本地化的程序与库若要本地化文本,都依赖 Locale。设置下locale,进入&lt;code&gt;/etc/locale.gen&lt;/code&gt;去掉前面的注释。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/locale.gen
--------------------
en_US.UTF-8 UTF-8
zh_CN.UTF-8 UTF-8
zh_TW.UTF-8 UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着生成locale讯息:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# locale-gen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建 locale.conf 并提交本地化选项:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# echo LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;终端字体和键盘映射&#34;&gt;&lt;strong&gt;终端字体和键盘映射&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Note: 对于大多中文用户，可忽略此章节。若要编辑可以修改&lt;code&gt;/etc/vconsole.conf&lt;/code&gt;。
&amp;gt; 警告: 如果您设置的 KEYMAP 与 loadkeys 变量并不一样,当修改密码重登时,可能无法正常登陆,一些键在两种布局的映射下并不一致。&lt;/p&gt;

&lt;h3 id=&#34;时间&#34;&gt;&lt;strong&gt;时间&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;别忘了设置一下时区,大陆通常用上海&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议设置时间标准 为 UTC,并调整 时间漂移:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# hwclock --systohc --utc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你使用双系统且时间如果不同步,可能需要把硬件时钟同步为本地时间:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# hwclock --systohc --localtime
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;创建初始-ramdisk-环境&#34;&gt;创建初始 ramdisk 环境&lt;/h3&gt;

&lt;p&gt;需要生成initramfs,虚拟化内存盘是Arch 加载内核所必须的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkinitcpio -p linux
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装启动器-bootloader&#34;&gt;&lt;strong&gt;安装启动器(bootloader)&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;bios-mbr&#34;&gt;BIOS/MBR&lt;/h3&gt;

&lt;p&gt;安装grub2 来引导arch (没用syslinux 引导过)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S grub-bios
# # pacman -S os-prober (双系统用户需要)
# grub-install /dev/sdx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以修改下grub 的配置选项,例如默认等待时间和主题等等&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面命令会自动生成配置文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PS:如果忘记创建GRUB配置文件/boot/grub/grub.cfg,然后直接重启到了GRUB命令行界面,输入以下命令:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh:grub&amp;gt; insmod legacycfg
sh:grub&amp;gt; legacy_configfile ${prefix}/menu.lst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选择启动到Arch下然后再重新创建合适的GRUB配置文件/boot/grub/grub.cfg
&amp;gt; Note:不过笔者这里失败了,屡试未果只好重装了,所以各位萌新最好别忘记了.&lt;/p&gt;

&lt;h3 id=&#34;uefi-gpt&#34;&gt;UEFI/GPT&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# bootctl install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成功执行以上命令之后,为系统创建一个引导入口。或使用 /usr/share/systemd/bootctl/ 的示例配置文件。此处提供两个示例文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /boot/loader/entries/arch.conf
-----------------------------------
title          Arch Linux
linux          /vmlinuz-linux
initrd         /initramfs-linux.img
options        root=/dev/sdaX rw
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# vi /boot/loader/loader.conf
-----------------------------
default  arch
timeout  5
editor   0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;网络配置&#34;&gt;网络配置&lt;/h2&gt;

&lt;h3 id=&#34;有线-1&#34;&gt;有线&lt;/h3&gt;

&lt;p&gt;该过程与#建立网络连接基本一致。
如果只用单一且固定的有线网络连接,启动 dhcpcd 服务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# systemctl enable dhcpcd@interface.service  (interface是网络接口名)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;无线&#34;&gt;无线&lt;/h3&gt;

&lt;p&gt;如果之前未安装 wpa_supplicant dialog 的话,这里可以安装,需要它们联网&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S wpa_supplicant dialog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可参考之前的连接方法.&lt;/p&gt;

&lt;h3 id=&#34;adsl宽带连接&#34;&gt;ADSL宽带连接&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S rp-pppoe
# pppoe-setup    # 配置
# systemctl start adsl    # 连接
# # systemctl enable adsl 以自动连接
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;用户管理&#34;&gt;用户管理&lt;/h2&gt;

&lt;h3 id=&#34;设置root密码&#34;&gt;&lt;strong&gt;设置Root密码&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; # passwd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;创建一个日常用户&#34;&gt;&lt;strong&gt;创建一个日常用户&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;这里添加wheel用户组是为了能够使用sudo提权,毕竟直接拿着root(root == 老婆{手动坏笑}),不小心按出&amp;rsquo;rm -rf /*&amp;lsquo;等等操作还是很危险的。(没错我经常这么干~)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# useradd -m -g users -G wheel -s /bin/bash new_Username
# passwd new_Username
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;卸载分区并重启系统&#34;&gt;&lt;strong&gt;卸载分区并重启系统&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;退出chroot,卸载分区,然后reboot。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# exit
# umount /mnt/{boot,home}
# umount /mnt
# reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除安装媒介,并还原 BIOS 中的启动选项。至此已经获得了一个完全可用的Arch-Linux！&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;额外安装&#34;&gt;额外安装&lt;/h1&gt;

&lt;h2 id=&#34;声音管理&#34;&gt;声音管理&lt;/h2&gt;

&lt;h3 id=&#34;安装声卡驱动&#34;&gt;&lt;strong&gt;安装声卡驱动&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S alsa-utils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arch Linux默认开启了声音支持,默认静音。可通过 alsamixer(所属包:alsa-utils) 取消静音:
* 方向键 选中 Master 和 PCM
* [M] 取消静音&lt;/p&gt;

&lt;h2 id=&#34;配置图形界面&#34;&gt;配置图形界面&lt;/h2&gt;

&lt;h3 id=&#34;安装显卡驱动&#34;&gt;&lt;strong&gt;安装显卡驱动&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# lspci | grep VGA    # 确定显卡型号
# pacman -S &amp;lt;驱动包&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;官方仓库提供的驱动包:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;开源&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;私有&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;general&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;xf86-video-vesa&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Intel&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;xf86-video-intel&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;nVidia GeForce 7+&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;xf86-video-nouveau&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nvidia&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;nVidia GeForce &lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;xf86-video-nouveau&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;nvidia-304xx&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;AMD/ATI&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;xf86-video-ati&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;VMware&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;xf86-video-vmware&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;安装-x-窗口系统&#34;&gt;&lt;strong&gt;安装 X 窗口系统&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;X 窗口管理系统(X11或者X) 是基于网络的显示协议,提供了窗口功能,包含建立图形用户界面(GUI)的标准工具和协议。Xorg是X窗口系统11版本的开源实现,提供图形用户界面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S xorg-server xorg-server-utils    # 安装 Xorg Server
# pacman -S xf86-input-synaptics    # 可选，触摸板支持
# pacman -S ttf-dejavu wqy-microhei    # 可选，Dejavu 与文泉驿 - 微米黑字体
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;安装桌面环境&#34;&gt;&lt;strong&gt;安装桌面环境&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Xorg只提供图形环境的基本框架,完整的用户体验还需要其他组件。桌面环境(DE):在X之上并与其共同运作,提供完整的功能和动态图形界面。桌面环境通常提供图标、小程序(applets)、窗口、工具栏、文件夹、壁纸、应用程序和拖放等功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官方提供的桌面环境有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cinnamon: cinnamon&lt;/li&gt;
&lt;li&gt;Enlightenment: enlightenment17&lt;/li&gt;
&lt;li&gt;GNOME: gnome gnome-extra&lt;/li&gt;
&lt;li&gt;KDE: kde kde-l10n-zh_cn&lt;/li&gt;
&lt;li&gt;LXDE: lxde&lt;/li&gt;
&lt;li&gt;Xfce: xfce4 xfce4-goodies&lt;/li&gt;
&lt;li&gt;其他桌面环境&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S xfce4   #我选择了xfce4,很轻量的桌面
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;窗口管理器
&amp;gt; 完整的桌面环境提供了完全的用户界面,但是通常会占用不少系统资源。希望系统性能最大化的用户可以只安装窗口管理器,然后加入需要的其他软件。大部分的桌面环境都可以换用其它的窗口管理器。 动态,堆栈式和平铺 窗口管理器处理窗口的方式各不相同。&lt;/p&gt;

&lt;p&gt;显示管理器
&amp;gt; 可以让图形界面自动启动,但我并未安装(我喜欢为所欲为:-)),因为并不需要自动启动桌面,想启动的时候再启动呗.&lt;/p&gt;

&lt;p&gt;桌面环境的启动方式主要有两种:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;startx&lt;/li&gt;
&lt;li&gt;显示管理器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装完xfce4后,键入:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# startxfce4  #启动xfce桌面session
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以复制/etc/X11/xinit/xinitrc至家目录下隐藏(如果家目录下已存在.xinitrc,可直接修改),修改最下方的启动信息:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cp /etc/X11/xinit/xinitrc ~/.xinitrc
# vi ~/.xinitrc
--------------------------------------
exec xfce4-session
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;其它安装&#34;&gt;其它安装&lt;/h1&gt;

&lt;p&gt;这里开始就是最耗费精力的时候了,各种应用还请根据个人需求和喜好进行安装,这里就不进行说明了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;pacman&#34;&gt;pacman&lt;/h1&gt;

&lt;p&gt;pacman?吃豆人？
嘿嘿,其实Arch中的pacman就等同于Debian系中的apt-get,Red Hat系中的dnf/yum这种包管理器。&lt;/p&gt;

&lt;p&gt;下面列举几个pacman的常用命令,其余的可以通过&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman --help #查看帮助信息
# man pacman  #获取更为详细的信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;同步与升级&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -Syy  #同步本地的包数据库和远程的软件仓库
# pacman -Syu  #同时进行同步软件库并更新系统到最新状态
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;安装软件包&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -S package_name1 package_name2  #安装或者升级单个软件包,或者一列软件包(包含依赖包)
# pacman -S extra/package_name  #一个软件包有多个版本(比如extra和testing)
# pacman -S testing/package_name  #选择其中一个版本进行安装
# pacman -Sy package_name  #同步包数据库并且安装一个软件包
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;卸载软件包&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -R package_name    #删除单个软件包,留其全部已经安装的依赖
# pacman -Rs package_name   #删除指定软件包,及其所有没有被其他已安装软件包使用的相关依赖
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;包数据库查询&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -Ss package #查询软件包
# pacman -Qs package #查询已安装的包
# pacman -Qi package #显示查找的包的信息
# pacman -Ql package #显示你要找的包的文件都安装的位置
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;其它&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pacman -U /path/package.pkg.tar.gz #安装本地包
# pacman -Sf pacman #重新安装包
# pacman -Sw package #下载但不安装包
# pacman -Scc #清理包缓存，下载的包会在/var/cache 这个目录
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;最后说两句&#34;&gt;最后说两句&lt;/h2&gt;

&lt;p&gt;2016-5-1:
其实个人折腾Arch也好几次了,不断地倒腾,算有一点点的小心得。&lt;/p&gt;

&lt;p&gt;2016-6-7:
哈哈，最近把DE从Xfce4换成了lxqt尝尝鲜,感觉瞬间高大上了不少~&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;[1]. &lt;font size=&#34;+1&#34; style=&#34;color: #00FFFF;&#34;&gt;&lt;a href=&#34;http://blog.csdn.net/ispeller/article/details/9327389&#34;&gt;关于Archlinux 的安装&lt;/a&gt;&lt;/font&gt;&lt;br/&gt;
[2]. &lt;font size=&#34;+1&#34; style=&#34;color: #00FFFF;&#34;&gt;&lt;a href=&#34;https://wiki.archlinux.org/&#34;&gt;archlinux 官方 wiki&lt;/a&gt;&lt;/font&gt;&lt;br/&gt;
[3]. &lt;font size=&#34;+1&#34; style=&#34;color: #00FFFF;&#34;&gt;&lt;a href=&#34;blog.lucode.net/linux/archlinux-install-tutorial.html&#34;&gt;archlinux安装教程&lt;/a&gt;&lt;/font&gt;&lt;br/&gt;
[4]. &lt;font size=&#34;+1&#34; style=&#34;color: #00FFFF;&#34;&gt;&lt;a href=&#34;https://access.redhat.com/documentation/en/red-hat-enterprise-linux/&#34;&gt;red hat官网参考文档&lt;/a&gt;&lt;/font&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>